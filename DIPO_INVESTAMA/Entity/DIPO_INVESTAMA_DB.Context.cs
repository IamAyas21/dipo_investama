//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DIPO_INVESTAMA.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DIPO_INVESTAMAEntities : DbContext
    {
        public DIPO_INVESTAMAEntities()
            : base("name=DIPO_INVESTAMAEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<AccountDetail> AccountDetails { get; set; }
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<BankFacility> BankFacilities { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<MenuRestriction> MenuRestrictions { get; set; }
        public virtual DbSet<PettyCash> PettyCashes { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<vw_PettyCash> vw_PettyCash { get; set; }
    
        public virtual ObjectResult<sp_AccountDDL_Result> sp_AccountDDL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AccountDDL_Result>("sp_AccountDDL");
        }
    
        public virtual ObjectResult<sp_BankFacilityDDL_Result> sp_BankFacilityDDL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_BankFacilityDDL_Result>("sp_BankFacilityDDL");
        }
    
        public virtual int sp_InputJournal(Nullable<System.DateTime> date, string account, string bankAccount, Nullable<decimal> amount, string description, string origin, string userId)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var accountParameter = account != null ?
                new ObjectParameter("account", account) :
                new ObjectParameter("account", typeof(string));
    
            var bankAccountParameter = bankAccount != null ?
                new ObjectParameter("bankAccount", bankAccount) :
                new ObjectParameter("bankAccount", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var originParameter = origin != null ?
                new ObjectParameter("Origin", origin) :
                new ObjectParameter("Origin", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InputJournal", dateParameter, accountParameter, bankAccountParameter, amountParameter, descriptionParameter, originParameter, userIdParameter);
        }
    
        public virtual ObjectResult<sp_OutputJournal_Result> sp_OutputJournal(string userId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string accountDetailId, string bankFacilityId, string sortBy)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var accountDetailIdParameter = accountDetailId != null ?
                new ObjectParameter("accountDetailId", accountDetailId) :
                new ObjectParameter("accountDetailId", typeof(string));
    
            var bankFacilityIdParameter = bankFacilityId != null ?
                new ObjectParameter("bankFacilityId", bankFacilityId) :
                new ObjectParameter("bankFacilityId", typeof(string));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("sortBy", sortBy) :
                new ObjectParameter("sortBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_OutputJournal_Result>("sp_OutputJournal", userIdParameter, startDateParameter, endDateParameter, accountDetailIdParameter, bankFacilityIdParameter, sortByParameter);
        }
    
        public virtual ObjectResult<sp_TodaysJournal_Result> sp_TodaysJournal()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TodaysJournal_Result>("sp_TodaysJournal");
        }
    
        public virtual ObjectResult<sp_UserLogin_Result> sp_UserLogin(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserLogin_Result>("sp_UserLogin", usernameParameter, passwordParameter);
        }
    }
}
