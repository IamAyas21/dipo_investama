@model DIPO_INVESTAMA.Models.DashboardViewModels
<link href="~/Content/dashboard.css" rel="stylesheet" />
@using (Html.BeginForm("Index", "Home", FormMethod.Post))
{
    <section>
        <div class="container">
            <div class="row">
                @for (int i = 0; i < Model.HomeTileReport.Count; i++)
                {
                    <div class="col-xs-3 tile-dashboard">
                        <div class="tile">
                            <h4 class="tile-name">@Model.HomeTileReport[i].Name</h4>
                            <h3 class="tile-amount">@Model.HomeTileReport[i].Amount M</h3>
                        </div>
                    </div>
                }
            </div>
        </div>
    </section>

    <section>
        <div class="container">
            <div class="row">
                <div class="col-xs-12">
                    <div id="chartdiv">

                    </div>

                </div>
            </div>
        </div>
    </section>

    //Section Bank and Account
    <section>
        <div class="container">
            <div class="row">
                <div class="col-lg-6">
                    <div class="report img-rounded">
                        <div class="box-header with-border">
                            <div class="row">
                                <div class="col-xs-6">
                                    <h4>Report of Bank</h4>
                                </div>
                                <div class="col-xs-6" align="right">
                                    @*<button type="submit" name="Submit" value="PDF_ReportBank"><img src="~/Assets/icon/pdf.png" width="30" height="30" /></button>*@
                                    <button type="submit" name="Submit" value="Excel_ReportBank"><img src="~/Assets/icon_xlxs.png" width="30" height="30" /></button>
                                </div>
                            </div>
                        </div>
                        <div class="box-body">
                            <div class="row">
                                <div class="col-xs-4">
                                    <label>Filter</label>
                                    @Html.DropDownListFor(model => model.FilterReportBank, ViewBag.FilterBankList as SelectList, new { @class = "form-control ddl" })
                                </div>
                                <div class="col-xs-4">
                                    <label>Periode</label>
                                    @Html.TextBoxFor(model => model.PeriodeReportBank, new { @class = "form-control pull-left period", @placeholder = "Date", autocomplete = "off" })
                                </div>
                                <div class="col-xs-4">
                                    <label>View by</label>
                                    @Html.DropDownListFor(model => model.ViewByReportBank
                       , new List<SelectListItem>
                        {
                           new SelectListItem{ Text="Choose", Value = "" },
                           new SelectListItem{ Text="Monthly", Value = "Monthly" },
                           new SelectListItem{ Text="Yearly", Value = "Yearly" }
                        }, new { @class = "form-control ddl" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-xs-12 chart-container">
                                    <div id="chart">
                                        <canvas id="areaChartBank"></canvas>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-xs-3">

                                </div>
                                <div class="col-xs-3">

                                </div>
                                <div class="col-xs-3">

                                </div>
                                <div class="col-xs-3">

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="report img-rounded">
                        <div class="box-header with-border">
                            <div class="row">
                                <div class="col-xs-6">
                                    <h4>Report of Account</h4>
                                </div>
                                <div class="col-xs-6" align="right">
                                    @*<button type="submit" name="Submit" value="PDF_ReportAccount"><img src="~/Assets/icon/pdf.png" width="30" height="30" /></button>*@
                                    <button type="submit" name="Submit" value="Excel_ReportAccount"><img src="~/Assets/icon_xlxs.png" width="30" height="30" /></button>
                                </div>
                            </div>
                        </div>
                        <div class="box-body">
                            <div class="row">
                                <div class="col-xs-4">
                                    <label>Filter</label>
                                    @Html.DropDownListFor(model => model.FilterReportAccount, ViewBag.FilterAccountList as SelectList, new { @class = "form-control ddl" })
                                </div>
                                <div class="col-xs-4">
                                    <label>Periode</label>
                                    @Html.TextBoxFor(model => model.PeriodeReportAccount, new { @class = "form-control pull-left period", @placeholder = "Date", autocomplete = "off" })
                                </div>
                                <div class="col-xs-4">
                                    <label>View by</label>
                                    @Html.DropDownListFor(model => model.ViewByReportAccount
                       , new List<SelectListItem>
                        {
                           new SelectListItem{ Text="Choose", Value = "" },
                           new SelectListItem{ Text="Monthly", Value = "Monthly" },
                           new SelectListItem{ Text="Yearly", Value = "Yearly" }
                        }, new { @class = "form-control ddl" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-xs-12">
                                    <div id="chart">
                                        <canvas id="areaChartAccount"></canvas>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-xs-3">

                                </div>
                                <div class="col-xs-3">

                                </div>
                                <div class="col-xs-3">

                                </div>
                                <div class="col-xs-3">

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    //End Section Bank and Account

    //Section Cash In and Cash Out
    <section>
        <div class="container">
            <div class="row">
                <div class="col-lg-6">
                    <div class="report img-rounded">
                        <div class="box-header with-border">
                            <div class="row">
                                <div class="col-xs-6">
                                    <h4>Report of Account Cash In</h4>
                                </div>
                                <div class="col-xs-6" align="right">
                                    @*<button type="submit" name="Submit" value="PDF_CashIn"><img src="~/Assets/icon/pdf.png" width="30" height="30" /></button>*@
                                    <button type="submit" name="Submit" value="Excel_CashIn"><img src="~/Assets/icon_xlxs.png" width="30" height="30" /></button>
                                </div>
                            </div>
                        </div>
                        <div class="box-body">
                            <div class="row">
                                <div class="col-xs-4">
                                    <label>Filter</label>
                                    @Html.DropDownListFor(model => model.FilterReportCashIn, ViewBag.FilterCashInList as SelectList, new { @class = "form-control ddl" })
                                </div>
                                <div class="col-xs-4">
                                    <label>Periode</label>
                                    @Html.TextBoxFor(model => model.PeriodeReportCashIn, new { @class = "form-control pull-left period", @placeholder = "Date", autocomplete = "off" })
                                </div>
                                <div class="col-xs-4">
                                    <label>View by</label>
                                    @Html.DropDownListFor(model => model.ViewByReportCashIn
                       , new List<SelectListItem>
                        {
                          new SelectListItem{ Text="Choose", Value = "" },
                           new SelectListItem{ Text="Monthly", Value = "Monthly" },
                           new SelectListItem{ Text="Yearly", Value = "Yearly" }
                        }, new { @class = "form-control ddl" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-xs-12">
                                    <div id="chart">
                                        <canvas id="areaChartCashIn"></canvas>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-xs-3">

                                </div>
                                <div class="col-xs-3">

                                </div>
                                <div class="col-xs-3">

                                </div>
                                <div class="col-xs-3">

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="report img-rounded">
                        <div class="box-header with-border">
                            <div class="row">
                                <div class="col-xs-6">
                                    <h4>Report of Account Cash Out</h4>
                                </div>
                                <div class="col-xs-6" align="right">
                                    @*<button type="submit" name="Submit" value="PDF_CashOut"><img src="~/Assets/icon/pdf.png" width="30" height="30" /></button>*@
                                    <button type="submit" name="Submit" value="Excel_CashOut"><img src="~/Assets/icon_xlxs.png" width="30" height="30" /></button>
                                </div>
                            </div>
                        </div>
                        <div class="box-body">
                            <div class="row">
                                <div class="col-xs-4">
                                    <label>Filter</label>
                                    @Html.DropDownListFor(model => model.FilterReportCashOut, ViewBag.FilterCashOutList as SelectList, new { @class = "form-control ddl" })
                                </div>
                                <div class="col-xs-4">
                                    <label>Periode</label>
                                    @Html.TextBoxFor(model => model.PeriodeReportCashOut, new { @class = "form-control pull-left period", @placeholder = "Date", autocomplete = "off" })
                                </div>
                                <div class="col-xs-4">
                                    <label>View by</label>
                                    @Html.DropDownListFor(model => model.ViewByReportCashOut
                       , new List<SelectListItem>
                        {
                            new SelectListItem{ Text="Choose", Value = "" },
                           new SelectListItem{ Text="Monthly", Value = "Monthly" },
                           new SelectListItem{ Text="Yearly", Value = "Yearly" }
                        }, new { @class = "form-control ddl" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-xs-12">
                                    <div id="chart">
                                        <canvas id="areaChartCashOut"></canvas>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-xs-3">

                                </div>
                                <div class="col-xs-3">

                                </div>
                                <div class="col-xs-3">

                                </div>
                                <div class="col-xs-3">

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
}
<script>
    $(function () {
        var chartOfBank;
        var chartOfAccount;
        var chartOfCashIn;
        var chartOfCashOut;
        var chartdiv;

        getReportChartBank();

        $('#PeriodeReportBank').daterangepicker({
            autoclose: true
        })
        $('#PeriodeReportBank').val("");

        $('#PeriodeReportAccount').daterangepicker({
            autoclose: true
        })
        $('#PeriodeReportAccount').val("");

        $('#PeriodeReportCashIn').daterangepicker({
            autoclose: true
        })
        $('#PeriodeReportCashIn').val("");

        $('#PeriodeReportCashOut').daterangepicker({
            autoclose: true
        })
        $('#PeriodeReportCashOut').val("");

        getReportOfBank();
        getReportOfAccount();
        getReportOfAccountCashIn();
        getReportOfAccountCashOut();

        $("#FilterReportBank").on("change", function () {
            $.ajax({
                type: "POST",
                url: "@Url.Action("ReportOfBank", "Home")",
                data: { model: model() },
                success: function (response) {
                    ChartOfBank(response);
                },
                error: function (response) {
                    alert(response)
                }
            });
        });

        $("#PeriodeReportBank").on("change", function () {
            $.ajax({
                type: "POST",
                url: "@Url.Action("ReportOfBank", "Home")",
                data: { model: model() },
                success: function (response) {
                    ChartOfBank(response);
                },
                error: function (response) {
                    alert(response)
                }
            });
        });

        $("#ViewByReportBank").on("change", function () {
            $.ajax({
                type: "POST",
                url: "@Url.Action("ReportOfBank", "Home")",
                data: { model: model() },
                success: function (response) {
                    ChartOfBank(response);
                },
                error: function (response) {
                    alert(response)
                }
            });
        });

        $("#FilterReportAccount").on("change", function () {
            $.ajax({
                type: "POST",
                url: "@Url.Action("ReportOfAccount", "Home")",
                data: { model: model() },
                success: function (response) {
                    ChartOfBank(response);
                },
                error: function (response) {
                    alert(response)
                }
            });
        });

        $("#PeriodeReportAccount").on("change", function () {
            $.ajax({
                type: "POST",
                url: "@Url.Action("ReportOfAccount", "Home")",
                data: { model: model() },
                success: function (response) {
                    ChartOfBank(response);
                },
                error: function (response) {
                    alert(response)
                }
            });
        });

        $("#ViewByReportAccount").on("change", function () {
            $.ajax({
                type: "POST",
                url: "@Url.Action("ReportOfAccount", "Home")",
                data: { model: model() },
                success: function (response) {
                    ChartOfBank(response);
                },
                error: function (response) {
                    alert(response)
                }
            });
        });

        $("#FilterReportCashIn").on("change", function () {
            $.ajax({
                type: "POST",
                url: "@Url.Action("ReportOfAccountCashIn", "Home")",
                data: { model: model() },
                success: function (response) {
                    ChartOfBank(response);
                },
                error: function (response) {
                    alert(response)
                }
            });
        });

        $("#PeriodeReportCashIn").on("change", function () {
            $.ajax({
                type: "POST",
                url: "@Url.Action("ReportOfAccountCashIn", "Home")",
                data: { model: model() },
                success: function (response) {
                    ChartOfBank(response);
                },
                error: function (response) {
                    alert(response)
                }
            });
        });

        $("#ViewByReportCashIn").on("change", function () {
            $.ajax({
                type: "POST",
                url: "@Url.Action("ReportOfAccountCashIn", "Home")",
                data: { model: model() },
                success: function (response) {
                    ChartOfBank(response);
                },
                error: function (response) {
                    alert(response)
                }
            });
        });

        $("#FilterReportCashOut").on("change", function () {
            $.ajax({
                type: "POST",
                url: "@Url.Action("ReportOfAccountCashOut", "Home")",
                data: { model: model() },
                success: function (response) {
                    ChartOfBank(response);
                },
                error: function (response) {
                    alert(response)
                }
            });
        });

        $("#PeriodeReportCashOut").on("change", function () {
            $.ajax({
                type: "POST",
                url: "@Url.Action("ReportOfAccountCashOut", "Home")",
                data: { model: model() },
                success: function (response) {
                    ChartOfBank(response);
                },
                error: function (response) {
                    alert(response)
                }
            });
        });

        $("#ViewByReportCashOut").on("change", function () {
            $.ajax({
                type: "POST",
                url: "@Url.Action("ReportOfAccountCashOut", "Home")",
                data: { model: model() },
                success: function (response) {
                    ChartOfBank(response);
                },
                error: function (response) {
                    alert(response)
                }
            });
        });

    });

    function getReportChartBank() {

        $.ajax({
            type: "POST",
            url: "@Url.Action("ReportChartBank", "Home")",
            data: { model: model() },
            success: function (response) {
                try {
                    chartdiv.destroy();
                }
                catch (err) {

                }

                am4core.ready(function () {

                    // Themes begin
                    am4core.useTheme(am4themes_animated);
                    // Themes end

                    // Create chart instance
                    var chart = am4core.create("chartdiv", am4charts.XYChart3D);

                    chart.titles.create().text = "O/S (%) & LCU (M) per LK/Bank";

                    // Add data
                    chart.data = response;

                    // Create axes
                    var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
                    categoryAxis.dataFields.category = "BankFacilityName";
                    categoryAxis.renderer.grid.template.location = 0;
                    categoryAxis.renderer.grid.template.strokeOpacity = 0;

                    var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
                    valueAxis.renderer.grid.template.strokeOpacity = 0;
                    valueAxis.min = -10;
                    valueAxis.max = 110;
                    valueAxis.strictMinMax = true;
                    valueAxis.renderer.baseGrid.disabled = true;
                    valueAxis.renderer.labels.template.adapter.add("text", function (text) {
                        if ((text > 100) || (text < 0)) {
                            return "";
                        }
                        else {
                            return text + "%";
                        }
                    })

                    // Create series
                    var series1 = chart.series.push(new am4charts.ConeSeries());
                    series1.dataFields.valueY = "Balance";
                    series1.dataFields.categoryX = "BankFacilityName";
                    series1.columns.template.width = am4core.percent(80);
                    series1.columns.template.fillOpacity = 0.9;
                    series1.columns.template.strokeOpacity = 1;
                    series1.columns.template.strokeWidth = 2;

                    var series2 = chart.series.push(new am4charts.ConeSeries());
                    series2.dataFields.valueY = "Cast Out";
                    series2.dataFields.categoryX = "BankFacilityName";
                    series2.stacked = true;
                    series2.columns.template.width = am4core.percent(80);
                    series2.columns.template.fill = am4core.color("#000");
                    series2.columns.template.fillOpacity = 0.1;
                    series2.columns.template.stroke = am4core.color("#000");
                    series2.columns.template.strokeOpacity = 0.2;
                    series2.columns.template.strokeWidth = 2;

                });
            },
            error: function (response) {
                alert(response)
            }
        });
    }

    function getReportOfBank(response) {
        $.ajax({
            type: "POST",
            url: "@Url.Action("ReportOfBank", "Home")",
            data: { model: model() },
            success: function (response) {

                ChartOfBank(response);
            },
            error: function (response) {

                alert(response)
            }
        });
    }

    function ChartOfBank(response) {
        try {
            chartOfBank.destroy();
        }
        catch (err) {

        }

        var arrLabel = [];
        var arrCashIn = [];
        var arrCashOut = [];

        $(response).each(function (idx, dt) {
            arrLabel.push(dt.Month);

            if (dt.Cash_In == null) {
                arrCashIn.push(0);
            }
            else {
                arrCashIn.push(dt.Cash_In);
            }

            if (dt.Cash_Out == null) {
                arrCashOut.push(0);
            }
            else {
                arrCashOut.push(dt.Cash_Out);
            }

        });

        var areaChartData = {
            labels: arrLabel,
            datasets: [
              {
                  label: 'Cash In',
                  backgroundColor: 'rgba(54, 162, 235, 0.3)',
                  borderColor: 'rgba(54, 162, 235, 0.3)',
                  borderWidth: 2,
                  fill: true,
                  data: arrCashIn
              },
              {
                  label: 'Cash Out',
                  backgroundColor: 'rgba(255, 99, 132, 0.3)',
                  borderColor: 'rgba(255, 99, 132, 0.3)',
                  borderWidth: 2,
                  fill: true,
                  data: arrCashOut
              }
            ]
        }
        barChart(areaChartData, "areaChartBank", "Bank")
    }

    function getReportOfAccount() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("ReportOfAccount", "Home")",
            success: function (response) {
                ChartOfAccount(response);
            },
            error: function (response) {
                alert(response)
            }
        });
    }

    function ChartOfAccount(response) {
        try {
            chartOfAccount.destroy();
        }
        catch (err) {

        }

        var arrLabel = [];
        var arrCashIn = [];
        var arrCashOut = [];

        $(response).each(function (idx, dt) {
            arrLabel.push(dt.Month);

            if (dt.Cash_In == null) {
                arrCashIn.push(0);
            }
            else {
                arrCashIn.push(dt.Cash_In);
            }

            if (dt.Cash_Out == null) {
                arrCashOut.push(0);
            }
            else {
                arrCashOut.push(dt.Cash_Out);
            }

        });

        var areaChartData = {
            labels: arrLabel,
            datasets: [
              {
                  label: 'Cash In',
                  backgroundColor: 'rgba(54, 162, 235, 0.3)',
                  borderColor: 'rgba(54, 162, 235, 0.3)',
                  borderWidth: 2,
                  fill: true,
                  data: arrCashIn
              },
              {
                  label: 'Cash Out',
                  backgroundColor: 'rgba(255, 99, 132, 0.3)',
                  borderColor: 'rgba(255, 99, 132, 0.3)',
                  borderWidth: 2,
                  fill: true,
                  data: arrCashOut
              }
            ]
        }

        barChart(areaChartData, "areaChartAccount", "Account")
    }

    function getReportOfAccountCashIn() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("ReportOfAccountCashIn", "Home")",
            success: function (response) {
                ChartOfCashIn(response);
            },
            error: function (response) {
                alert(response)
            }
        });
    }

    function ChartOfCashIn(response) {
        try {
            chartOfCashIn.destroy();
        }
        catch (err) {

        }

        var arrLabel = [];
        var arrOpt = [];
        var arrAcc = [];

        $(response).each(function (idx, dt) {

            arrLabel.push(dt.Month);

            if (dt.Operation == null) {
                arrOpt.push(0);
            }
            else {
                arrOpt.push(dt.Operation);
            }

            if (dt.Accounting == null) {
                arrAcc.push(0);
            }
            else {
                arrAcc.push(dt.Accounting);
            }

        });

        var areaChartData = {
            labels: arrLabel,
            datasets: [
              {
                  label: 'Operation',
                  backgroundColor: 'rgba(54, 162, 235, 0.3)',
                  borderColor: 'rgba(54, 162, 235, 0.3)',
                  borderWidth: 2,
                  fill: true,
                  data: arrOpt
              },
              {
                  label: 'Accounting',
                  backgroundColor: 'rgba(255, 99, 132, 0.3)',
                  borderColor: 'rgba(255, 99, 132, 0.3)',
                  borderWidth: 2,
                  fill: true,
                  data: arrAcc
              }
            ]
        }

        barChart(areaChartData, "areaChartCashIn", "Cash In")
    }

    function getReportOfAccountCashOut() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("ReportOfAccountCashOut", "Home")",
            success: function (response) {
                ChartOfCashOut(response);
            },
            error: function (response) {
                alert(response)
            }
        });
    }

    function ChartOfCashOut(response) {
        try {
            chartOfCashOut.destroy();
        }
        catch (err) {

        }

        var arrLabel = [];
        var arrOpt = [];
        var arrAcc = [];

        $(response).each(function (idx, dt) {

            arrLabel.push(dt.Month);

            if (dt.Operation == null) {
                arrOpt.push(0);
            }
            else {
                arrOpt.push(dt.Operation);
            }

            if (dt.Accounting == null) {
                arrAcc.push(0);
            }
            else {
                arrAcc.push(dt.Accounting);
            }

        });

        var areaChartData = {
            labels: arrLabel,
            datasets: [
              {
                  label: 'Operation',
                  backgroundColor: 'rgba(54, 162, 235, 0.3)',
                  borderColor: 'rgba(54, 162, 235, 0.3)',
                  borderWidth: 2,
                  fill: true,
                  data: arrOpt
              },
              {
                  label: 'Accounting',
                  backgroundColor: 'rgba(255, 99, 132, 0.3)',
                  borderColor: 'rgba(255, 99, 132, 0.3)',
                  borderWidth: 2,
                  fill: true,
                  data: arrAcc
              }
            ]
        }

        barChart(areaChartData, "areaChartCashOut", "Cash Out")
    }

    function model() {
        return data =
        {
            FilterReportBank: $("#FilterReportBank").val(),
            PeriodeReportBank: $("#PeriodeReportBank").val(),
            ViewByReportBank: $("#ViewByReportBank").val(),
            FilterReportAccount: $("#FilterReportAccount").val(),
            PeriodeReportAccount: $("#PeriodeReportAccount").val(),
            ViewByReportAccount: $("#ViewByReportAccount").val(),
            FilterReportCashIn: $("#FilterReportCashIn").val(),
            PeriodeReportCashIn: $("#PeriodeReportCashIn").val(),
            ViewByReportCashIn: $("#ViewByReportCashIn").val(),
            FilterReportCashOut: $("#FilterReportCashOut").val(),
            PeriodeReportCashOut: $("#PeriodeReportCashOut").val(),
            ViewByReportCashOut: $("#ViewByReportCashOut").val()
        };
    }

    function barChart(bardata, id, report) {
        var Obj;
        var chartOptions = {
            legend: {
                display: true,
                position: 'top',
                labels: {
                    boxWidth: 80,
                    fontColor: 'white'
                }
            },
            showLines: true,
            spanGaps: false,
            maintainAspectRatio: false,
            tooltips: {
                enabled: true,
                callbacks: {
                    label: function (tooltipItem, data) {
                        return (tooltipItem.yLabel / 1).toFixed(0).replace(/\d(?=(\d{3})+\.)/g, '$&,');
                    },
                    title: function (tooltipItem, data) {
                        return (data.datasets[tooltipItem[0].datasetIndex].label);
                    }
                }
            },
            animation: {
                duration: 500,
                easing: "easeOutQuart",
                onComplete: function () {
                    // console.log(this);
                    Obj = this;
                    var ctx = this.chart.ctx;
                    //ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontFamily, 'bold', Chart.defaults.global.defaultFontFamily);
                    ctx.font = "16px Arial";
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'bottom';
                    this.data.datasets.forEach(function (dataset) {
                        for (var i = 0; i < dataset.data.length; i++) {
                            var hidden = dataset._meta[Object.keys(dataset._meta)[0]].hidden;
                            if (hidden == null) { hidden = false; }
                            if (!hidden) {
                                var model = dataset._meta[Object.keys(dataset._meta)[0]].data[i]._model,
                                    scale_max = dataset._meta[Object.keys(dataset._meta)[0]].data[i]._yScale.maxHeight;
                                var y_pos = model.y - 5;
                                if (dataset.data[i] != 0) {
                                    if ((scale_max - model.y) / scale_max >= 0.50)
                                        y_pos = model.y + 20;
                                }

                                if (dataset.label != "") {
                                    //ctx.fillStyle = dataset.borderColor[rgba(0, 0, 0, 0.1)];
                                    ctx.fillText((dataset.data[i] / 1).toFixed(1).replace(/\d(?=(\d{3})+\.)/g, '$&,').replace('.0', ''), model.x, y_pos);
                                }
                                else {
                                    var per = dataset.addData[i];
                                    var sym = "▲";
                                    var fx = 1;
                                    var perColor = "#00f";

                                    if (per == 0) {
                                        sym = "•";
                                        fx = 0;
                                        perColor = "#444";
                                    }
                                    else if (per < 0) {
                                        sym = "▼";
                                        perColor = "#f00";
                                    }
                                    ctx.fillStyle = perColor;

                                    if (isNaN(per)) {
                                        ctx.fillText('', model.x, y_pos);
                                    }
                                    else if (per.toString() == "Infinity") {
                                        ctx.fillText('▲100%', model.x, y_pos);
                                    }
                                    else {

                                        ctx.fillText(sym + per.toFixed(0) + '%', model.x, y_pos);
                                    }
                                }
                            }
                        }
                    });
                }
            },
            responsive: true,
            scales: {
                yAxes: [{
                    ticks: {
                        callback: function (label, index, labels) {
                            var rtn;
                            if ((label / 1) < 1) {
                                rtn = (label / 1000000).toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');// / 1000 + 'k';
                            }
                            else {
                                rtn = (label / 1000000).toFixed(1).replace(/\d(?=(\d{3})+\.)/g, '$&,').replace(".0", "");// / 1000 + 'k';
                            }

                            return rtn;
                        },
                        beginAtZero: true

                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'Mio'
                    }
                }]
            }
        };

        if (report == "Bank") {
            chartOfBank = new Chart(document.getElementById(id).getContext('2d'), {
                type: 'line',
                data: bardata,
                options: chartOptions
            });
        }
        else if (report == "Account") {
            chartOfAccount = new Chart(document.getElementById(id).getContext('2d'), {
                type: 'line',
                data: bardata,
                options: chartOptions
            });
        }
        else if (report == "Cash In") {
            chartOfCashIn = new Chart(document.getElementById(id).getContext('2d'), {
                type: 'line',
                data: bardata,
                options: chartOptions
            });
        }
        else if (report == "Cash Out") {
            chartOfCashOut = new Chart(document.getElementById(id).getContext('2d'), {
                type: 'line',
                data: bardata,
                options: chartOptions
            });
        }
    }
</script>
